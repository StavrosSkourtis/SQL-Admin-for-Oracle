/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.skourtis.sqladmin.view;

import java.awt.Image;
import java.util.LinkedList;
import javafx.scene.shape.QuadCurve;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import net.skourtis.sqladmin.controller.WorkspaceController;
import net.skourtis.sqladmin.model.Column;
import net.skourtis.sqladmin.model.Database;
import net.skourtis.sqladmin.model.Function;
import net.skourtis.sqladmin.model.Procedure;
import net.skourtis.sqladmin.model.SqlProcedure;
import net.skourtis.sqladmin.model.Table;
import net.skourtis.sqladmin.model.Trigger;
import net.skourtis.sqladmin.utils.Utils;

/**
 *
 * @author Stavros
 */
public class WorkspaceFrame extends javax.swing.JFrame {

    private TablePanel tablePanel;
    private QueryPanel queryPanel;

    /**
     * Creates new form WorkspaceFrame
     */
    public WorkspaceFrame() {

        UIManager.put("Tree.closedIcon", new ImageIcon("res/ui/parent.png"));
        UIManager.put("Tree.openIcon", new ImageIcon("res/ui/open.png"));
        UIManager.put("Tree.leafIcon", new ImageIcon("res/ui/leaf.png"));
        
        initComponents();
        stopLoading();
        refresh();

        queryPanel = new QueryPanel();
        mainTabedPane.addTab("Query", queryPanel);
        mainTabedPane.setTabComponentAt(mainTabedPane.getTabCount() - 1, new TabPane("Query", mainTabedPane, queryPanel));

    }
    
    public void startLoadind(){
        loadingGif.setVisible(true);
    }
    
    public void stopLoading(){
        loadingGif.setVisible(false);
    }
    
    
    public void setSelected(String name){
        selectedConnection.setText("Selected connetion : "+name);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        newConnectionToolbarButton = new javax.swing.JButton();
        executeToolbarButton = new javax.swing.JButton();
        saveSqlToobarButton = new javax.swing.JButton();
        selectedConnection = new javax.swing.JLabel();
        loadingGif = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        connectionsTree = new javax.swing.JTree();
        jSplitPane2 = new javax.swing.JSplitPane();
        mainTabedPane = new javax.swing.JTabbedPane();
        outputPane = new javax.swing.JPanel();
        outputTabedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        queryTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newConnectionMenuButton = new javax.swing.JMenuItem();
        saveConnectionsMenuButton = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        refreshConnection = new javax.swing.JMenuItem();
        closeConnection = new javax.swing.JMenuItem();
        connectionDetails = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sql Admin");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        newConnectionToolbarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new.png"))); // NOI18N
        newConnectionToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnectionToolbarButtonActionPerformed(evt);
            }
        });

        executeToolbarButton.setIcon(new javax.swing.ImageIcon("/home/phenom/Data/Copy/Projects/Me/SQL-Admin-for-Oracle/res/ui/execute.png")); // NOI18N
        executeToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeToolbarButtonActionPerformed(evt);
            }
        });

        saveSqlToobarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        saveSqlToobarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSqlToobarButtonActionPerformed(evt);
            }
        });

        selectedConnection.setText("Connection selected : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(newConnectionToolbarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveSqlToobarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executeToolbarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectedConnection)
                .addGap(18, 18, 18)
                .addComponent(loadingGif)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadingGif, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectedConnection)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(executeToolbarButton)
                    .addComponent(saveSqlToobarButton)
                    .addComponent(newConnectionToolbarButton))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jSplitPane1.setDividerLocation(250);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Connections");
        connectionsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        connectionsTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                connectionsTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(connectionsTree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jSplitPane2.setDividerLocation(500);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setTopComponent(mainTabedPane);

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        outputTabedPane.addTab("Output", jScrollPane1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        queryTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        queryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Column 1", "Column 2", "Column 3", "Column 4"
            }
        ));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        queryTable.setDefaultRenderer(String.class, centerRenderer);
        queryTable.setRowHeight(20);
        jScrollPane4.setViewportView(queryTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel2);

        outputTabedPane.addTab("Query Result", jScrollPane3);

        javax.swing.GroupLayout outputPaneLayout = new javax.swing.GroupLayout(outputPane);
        outputPane.setLayout(outputPaneLayout);
        outputPaneLayout.setHorizontalGroup(
            outputPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputTabedPane)
        );
        outputPaneLayout.setVerticalGroup(
            outputPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputTabedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(outputPane);

        jSplitPane1.setRightComponent(jSplitPane2);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(56, 100));

        jMenu1.setText("File");

        newConnectionMenuButton.setText("New Connection");
        newConnectionMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnectionMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(newConnectionMenuButton);

        saveConnectionsMenuButton.setText("Save Connections");
        saveConnectionsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConnectionsMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(saveConnectionsMenuButton);
        jMenu1.add(jSeparator2);

        jMenuItem3.setText("Save Query");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Clear Output");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem10.setText("Settings");
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        viewMenu.setText("View");

        jMenuItem1.setText("Show Query Writer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        viewMenu.add(jMenuItem1);

        jMenuBar1.add(viewMenu);

        jMenu4.setText("About");

        jMenuItem9.setText("Credits");
        jMenu4.add(jMenuItem9);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Connection");

        refreshConnection.setText("Refresh");
        refreshConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConnectionActionPerformed(evt);
            }
        });
        jMenu3.add(refreshConnection);

        closeConnection.setText("Close");
        closeConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeConnectionActionPerformed(evt);
            }
        });
        jMenu3.add(closeConnection);

        connectionDetails.setText("Details");
        connectionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionDetailsActionPerformed(evt);
            }
        });
        jMenu3.add(connectionDetails);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Query");

        jMenuItem4.setText("Execute Query");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem5.setText("Execute Update");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveSqlToobarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSqlToobarButtonActionPerformed
        saveQuery();
    }//GEN-LAST:event_saveSqlToobarButtonActionPerformed

    private void newConnectionMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionMenuButtonActionPerformed
        WorkspaceController.newConnection();
    }//GEN-LAST:event_newConnectionMenuButtonActionPerformed

    private void executeToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeToolbarButtonActionPerformed
        WorkspaceController.exexuteQuery(queryPanel.getSql());
    }//GEN-LAST:event_executeToolbarButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        if (mainTabedPane.indexOfComponent(queryPanel) >= 0) {
            JOptionPane.showMessageDialog(null, "Query writer is already openend!");
            return;
        }

        queryPanel = new QueryPanel();
        mainTabedPane.addTab("Query", queryPanel);
        mainTabedPane.setTabComponentAt(mainTabedPane.getTabCount() - 1, new TabPane("Query", mainTabedPane, queryPanel));
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void connectionsTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_connectionsTreeValueChanged
        Object path[] = null;
        try{
            path = evt.getNewLeadSelectionPath().getPath();
        }catch(NullPointerException e){
            return;
        }
        
        if (path.length == 4) {
            DefaultMutableTreeNode tableNode = (DefaultMutableTreeNode) path[2];
            DefaultMutableTreeNode dbNode = (DefaultMutableTreeNode) path[1];
            DefaultMutableTreeNode tSpecificNode = (DefaultMutableTreeNode) path[3];

            if (tableNode.getUserObject().equals("Tables")) {

                Table table = WorkspaceController.connections.get(dbNode.getUserObject()).getTable((String) tSpecificNode.getUserObject());
                if (tablePanel != null) {
                    mainTabedPane.remove(tablePanel);
                }
                tablePanel = new TablePanel(table);
                mainTabedPane.addTab(table.getName(), tablePanel);
                mainTabedPane.setTabComponentAt(mainTabedPane.getTabCount() - 1, new TabPane(table.getName(), mainTabedPane, tablePanel));
                mainTabedPane.setSelectedIndex(mainTabedPane.getTabCount()-1);
                return;
            }

            SqlProcedure proc = null;
            if (tableNode.getUserObject().equals("Functions")) {
                proc = WorkspaceController.connections.get(dbNode.getUserObject()).getFunction((String) tSpecificNode.getUserObject());
            } else if (tableNode.getUserObject().equals("Procedures")) {
                proc = WorkspaceController.connections.get(dbNode.getUserObject()).getProcedure((String) tSpecificNode.getUserObject());
            } else if (tableNode.getUserObject().equals("Triggers")) {
                proc = WorkspaceController.connections.get(dbNode.getUserObject()).getTrigger((String) tSpecificNode.getUserObject());
            } else if (tableNode.getUserObject().equals("Types")) {
                proc = WorkspaceController.connections.get(dbNode.getUserObject()).getType((String) tSpecificNode.getUserObject());
            }

            SqlProcedurePanel panel = new SqlProcedurePanel(proc);
            mainTabedPane.addTab(proc.getName(), panel);
            mainTabedPane.setTabComponentAt(mainTabedPane.getTabCount() - 1, new TabPane(proc.getName(), mainTabedPane, panel));
            mainTabedPane.setSelectedIndex(mainTabedPane.getTabCount()-1);

        }else if(path.length >=2){
            DefaultMutableTreeNode dbNode = (DefaultMutableTreeNode) path[1];
            WorkspaceController.selectedDb = WorkspaceController.connections.get(dbNode.getUserObject()).getName();
            setSelected(WorkspaceController.selectedDb);
        }
        
    }//GEN-LAST:event_connectionsTreeValueChanged

    private void refreshConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConnectionActionPerformed
        WorkspaceController.refreshCurrentConnection();
    }//GEN-LAST:event_refreshConnectionActionPerformed

    private void newConnectionToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionToolbarButtonActionPerformed
        WorkspaceController.newConnection();
    }//GEN-LAST:event_newConnectionToolbarButtonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        WorkspaceController.close();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void closeConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeConnectionActionPerformed
        WorkspaceController.closeSelected();
    }//GEN-LAST:event_closeConnectionActionPerformed

    private void connectionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionDetailsActionPerformed
        WorkspaceController.showSelectedDetails();
    }//GEN-LAST:event_connectionDetailsActionPerformed

    private void saveConnectionsMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConnectionsMenuButtonActionPerformed
        WorkspaceController.saveConnections();
    }//GEN-LAST:event_saveConnectionsMenuButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveQuery();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        WorkspaceController.exexuteQuery(queryPanel.getSql());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        String queries[] = queryPanel.getSql().split(";");
        
        for (String query : queries) {
            query = query.trim();
            if(!query.equals("")){
                WorkspaceController.executeUpdate(query);
            }
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        outputTextArea.setText("");
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    
    public void saveQuery(){
        JFileChooser chooser = new JFileChooser();
        
        int option = chooser.showSaveDialog(null);
        
        if(option == JFileChooser.APPROVE_OPTION){
            WorkspaceController.saveToFile(chooser.getSelectedFile().getAbsolutePath(), queryPanel.getSql());
        }
        
    }
    
    public void refresh() {
        /*
         Create the root element
         */
        root = new DefaultMutableTreeNode("Connections");

        /*
         Loop through every connection
         */
        for (Database db : WorkspaceController.connections.values()) {
            /*
             Create the connection Root
             */
            DefaultMutableTreeNode connectionRoot = new DefaultMutableTreeNode(db.getName());

            /*
             Create the connection's lists
             */
            DefaultMutableTreeNode tables = new DefaultMutableTreeNode("Tables");
            DefaultMutableTreeNode triggers = new DefaultMutableTreeNode("Triggers");
            DefaultMutableTreeNode functions = new DefaultMutableTreeNode("Functions");
            DefaultMutableTreeNode procedures = new DefaultMutableTreeNode("Procedures");
            DefaultMutableTreeNode types = new DefaultMutableTreeNode("Types");

            /*
             Add the lists to the connection
             */
            connectionRoot.add(tables);
            connectionRoot.add(triggers);
            connectionRoot.add(functions);
            connectionRoot.add(procedures);
            connectionRoot.add(types);

            /*
             Add the tables to the tables list
             */
            for (Table modelTable : db.getTables()) {
                DefaultMutableTreeNode table = new DefaultMutableTreeNode(modelTable.getName());

                /*
                 Add the columns to the table
                 */
                for (Column modelColumn : modelTable.getColumns()) {
                    DefaultMutableTreeNode column = new DefaultMutableTreeNode(modelColumn.getName());
                    table.add(column);
                }

                tables.add(table);
            }

            /*
             Add the triggers to the triggers list
             */
            for (Trigger modelTrigger : db.getTriggers()) {
                DefaultMutableTreeNode trigger = new DefaultMutableTreeNode(modelTrigger.getName());

                triggers.add(trigger);
            }

            /*
             Add the functions to the functions list
             */
            for (Function modelFunction : db.getFuctions()) {
                DefaultMutableTreeNode function = new DefaultMutableTreeNode(modelFunction.getName());

                functions.add(function);
            }

            /*
             Add the procedures to the procedures list
             */
            for (Procedure modelProcedure : db.getProcedures()) {
                DefaultMutableTreeNode procedure = new DefaultMutableTreeNode(modelProcedure.getName());

                procedures.add(procedure);
            }

            /*
             Add the types to the types list
             */
            for (net.skourtis.sqladmin.model.Type modelType : db.getTypes()) {
                DefaultMutableTreeNode type = new DefaultMutableTreeNode(modelType.getName());

                types.add(type);
            }

            /*
             Add the connection to the root element
             */
            root.add(connectionRoot);
        }

        DefaultTreeModel model = new DefaultTreeModel(root);
        connectionsTree.setModel(model);
    }

    public void setQueryResult(LinkedList<Column> columns) {
        if (columns.size() <= 0) {
            return;
        }

        queryTable.setModel(Utils.dataToTableModel(columns));
        queryTable.repaint();
    }

    public void appendOutput(String out) {
        outputTextArea.append(out);
    }

    public void appendOutputln(String out) {
        outputTextArea.append(out + "\r\n");
    }

    public void setOutputPane(int i) {
        outputTabedPane.setSelectedIndex(i);
    }

    private DefaultMutableTreeNode root;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeConnection;
    private javax.swing.JMenuItem connectionDetails;
    private javax.swing.JTree connectionsTree;
    private javax.swing.JButton executeToolbarButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel loadingGif;
    private javax.swing.JTabbedPane mainTabedPane;
    private javax.swing.JMenuItem newConnectionMenuButton;
    private javax.swing.JButton newConnectionToolbarButton;
    private javax.swing.JPanel outputPane;
    private javax.swing.JTabbedPane outputTabedPane;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JTable queryTable;
    private javax.swing.JMenuItem refreshConnection;
    private javax.swing.JMenuItem saveConnectionsMenuButton;
    private javax.swing.JButton saveSqlToobarButton;
    private javax.swing.JLabel selectedConnection;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
